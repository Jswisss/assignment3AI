import tensorflow as tf

from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt

#Download and preprocess the CIFAR-10 dataset
#This is a dataset of 50,000 32x32 color training images and 10,000 test images, labeled over 10 categories.
#We normalize training data, since we can make sure that the various features have similar value ranges so that 
#gradient descents can converge faster.


(train_images, train_labels), (test_images, test_labels) = datasets.cifar10.load_data()

# Normalize pixel values to be between 0 and 1
train_images, test_images = train_images / 255.0, test_images / 255.0

class_names = ['airplane', 'automobile', 'bird', 'cat', 'deer',
               'dog', 'frog', 'horse', 'ship', 'truck']

plt.figure(figsize=(10,10))
for i in range(25):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(train_images[i])
    # The CIFAR labels happen to be arrays, 
    # which is why you need the extra index
    plt.xlabel(class_names[train_labels[i][0]])
plt.show()

model = models.Sequential()
model.add(layers.Conv2D(filters=64, kernel_size=(3, 3), strides = (1,1), activation='relu', padding="same", input_shape=(32, 32, 3)))
model.add(layers.Conv2D(filters=64, kernel_size=(3, 3), strides = (1,1), activation='relu', padding="same"))
model.add(layers.MaxPooling2D(pool_size=(2, 2), strides=(2,2)))
model.add(layers.Conv2D(filters=128, kernel_size=(3, 3), strides = (1,1), activation='relu', padding="same"))
model.add(layers.Conv2D(filters=128, kernel_size=(3, 3), strides = (1,1), activation='relu', padding="same"))
model.add(layers.MaxPooling2D(pool_size=(2, 2), strides=(2,2)))
model.add(layers.Conv2D(filters=256, kernel_size=(3, 3), strides = (1,1), activation='relu', padding="same"))
model.add(layers.Conv2D(filters=256, kernel_size=(3, 3), strides = (1,1), activation='relu', padding="same"))
model.add(layers.MaxPooling2D(pool_size=(2, 2), strides=(2,2)))
model.add(layers.Conv2D(filters=512, kernel_size=(3, 3), strides = (1,1), activation='relu', padding="same"))
model.add(layers.Conv2D(filters=512, kernel_size=(3, 3), strides = (1,1), activation='relu', padding="same"))
model.add(layers.Conv2D(filters=512, kernel_size=(3, 3), strides = (1,1), activation='relu', padding="same"))
model.add(layers.MaxPooling2D(pool_size=(2, 2), strides=(2,2)))
model.add(layers.Conv2D(filters=512, kernel_size=(3, 3), strides = (1,1), activation='relu', padding="same"))
model.add(layers.Conv2D(filters=512, kernel_size=(3, 3), strides = (1,1), activation='relu', padding="same"))
model.add(layers.Conv2D(filters=512, kernel_size=(3, 3), strides = (1,1), activation='relu', padding="same"))
model.add(layers.MaxPooling2D(pool_size=(2, 2), strides=(2,2)))

model.summary()

model.add(layers.Flatten())
model.add(layers.Dense(units= 4096, activation='relu'))
model.add(layers.Dense(units= 4096, activation='relu'))
model.add(layers.Dense(units= 1000, activation='softmax'))

model.summary()

model.compile(optimizer='SGD',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

history = model.fit(train_images, train_labels, epochs=20, 
                    validation_data=(test_images, test_labels))

plt.plot(history.history['accuracy'], label='accuracy')
plt.plot(history.history['val_accuracy'], label = 'val_accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.ylim([0.5, 0.8])
plt.legend(loc='lower right')
plt.show()
# Evaluate the model
test_loss, test_acc = model.evaluate(test_images,  test_labels, verbose=2)
print(test_acc)